package net

import (
	"bitcoin/db"
	"bitcoin/script"
	"bitcoin/util"
	"bytes"
	"context"
	"encoding/hex"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"testing"
)

func TestSaveTXToDat(t *testing.T) {
	data := util.HexDecode("02000000025851007f85353cca456be7bbc2ad2b4ac04bc62f3e856d537bd0f2864017b803010000006a473044022051764a3a7f0058927bb0b45bd984b9d2ec2b8f2871840d345d41b97ead3c0e0502203d997c01a660df3a34892da624b864a0e329546043e2735594d837395bfda2f8012102679a681d9b5bf5c672e0413997762664a17009038674b806bf27dd6b368d9b67feffffff849c1c9e721d717940dc40145198be783829accfd0f1218a6d02612d834a5bff010000006a473044022048bd510b1848089ddf5276fe984c4390d091dbb61c8d2ff10220049a58e2ef5902205210ddd95d7eb3117e8caf15fe18485aad095fc6b7b748e4cd3805612367a111012102679a681d9b5bf5c672e0413997762664a17009038674b806bf27dd6b368d9b67feffffff35b0c0d617000000001976a914de87130a29d3dd93efe1e65488f074fc454fc80288acc08a37000000000017a914c5fb6339006774ef54915930542c12f936443c178747c92d00000000001976a9141bd83ccd4f4dc6a0bfd8e92caa0d0e8f5447401b88acdb8da000000000001976a914475984e43f1fead98f9eaa858ca4a2469fee913988acb80108000000000017a91444d15b9a15ae5ddcc45548e6236fe9ae2b1df5b58793d6fa01000000001976a9149a6eb61f436ee9e6cb2d83937ce2a8e5ca7938a488acf0e1ad020000000017a91469f375b0315c75cf7401ebd5133ea816c24c960087f00edf030000000017a91463461c46a2edcb431630d432ef0fa37b47e1f9da87de7713020000000017a91460add68a91f7423a285228656fcc50a64dbd624c8789d30300000000001976a914027ac290d7abc7233b0caef0cf2299cf413eca0688ac29561600000000001976a91401de673a58d07c6d72066188a04c981b4531987788ac969e8b030000000017a91469f3764ac70445759b217ab846a738a7998dec0a872c9502000000000017a9149b088d74a4f826c96dd6cc241f6cbbad8d0c248d87302dfa020000000017a91473794963a337f8b96c7adf666f58c6a03ab75609870c78dd000000000017a91469f376143cb795bdcdb598d14c2af8023a870b8887a08faf020000000017a91469f3752821d8bd6c737f1dd588f435cdb5d870aa87fa87d5020000000017a91469f376495ef7b4600163389ed9b9cfc458459b8a87b9c64900000000001976a914d6562f18ecfdab95d84878cf6c7faaa612ae052b88acf09c5000000000001976a91498105e1af449afb06d3fd42b42b32cb7ec6dd8bf88acf0490200000000001976a9144d08efc581a24a23500a7df20b07114225f2aa7588ac0cd871000000000017a914b30cf735aeb7e821a8a5e31c3d085c7a146fc12387a963ea00000000001976a91484846daf4ad43863ed367a3f0291829a6ea3a57988acaf8b9b010000000017a914d4b6a2cc6e8ce53caff06a421cefea02475088d787f0c1ab1f000000001976a9142baa0d1b55929701974196730286478fa856288f88acfa6f6400000000001976a914bb30a873099dfe52accfb372ca596405d8d38d2888ac526b3e000000000017a914fcb6d699fef3701b9b44ee3034b22d4697bdeae7874c9511000000000017a914f76284e04ba35740b612292477a3a89b04aafa0b87060595000000000017a9145fe387f5f891db67ab39e232ab813cf196b8525987aa611c000000000017a9144138bab9498cedcb075a4ca1f1f8f6c9cf9311838708435a00000000001976a914217d573597e66b9b255856a4b062d588befa357c88ac705d8f020000000017a9145f7c6e04f625ca0c52f76b2578b128127578398b87006cdc020000000017a91472659e50c3bf34375edeedfe464d45853bc74e21874a1aeb00000000001976a9142d50c880987a6c5abb36bb7efda4f9f2cb9230c988ac30d397000000000017a914989e9b47e083e72f93f0bcd75fe9d4a4fa7411628768421f00000000001976a914ac5ea79e4acd92ebfb56c605ad5abee6a8fa8db488acbd0c20000000000017a9147d5a41e577481a4496a9c343f7b928a5fe0896d08791eb66000000000017a914aec2784185de66bb7851d0dd70716270e7ca2e2e877ffdc3000000000017a91474dce2af251c78e303b43189837d5cccf965562687b37e9e01000000001976a9140809ea11e81664ca79e4e2efe89613f22ca3be4b88ac2e9878000000000017a914920b83498e42bdd01774594fdef363a64886d7af87303a1a000000000017a9146694fe027a6411195401eaf4634e158790e456d58703027900000000001976a9143abca6c806379c24d0dd2aa4c739ce413bb46e2b88ac209a1d000000000017a91469f37522e23614261ace1d2c86bd07b14cf6ec4687af9b32000000000017a914452940a94c515dd3f5573fa7adcb5b180c36ecbf870a262a000000000017a914034ddc66b52f3d97b08ee95354694fed7fe043d68700a3e1110000000017a914ef0c13bf0122f2e5285fe24823c46c108bc7b4c18722722f00000000001976a9149660c2cc7ea293c55436e734dd74a15d8c61192988acce0436090000000017a914d69deac64cf04ed024079de75a749453aef221e8878c7468000000000017a9144f355fe23cd6d244441eb1438e4c0f5f7db815ed87e93711000000000017a9145ee86e475b2da55c230e536e0eaa8af526ff90de876f8654010000000017a914b1a87e08504249419047c53ba2ba7402ff3396fc8770acf0010000000017a9147909c2a9f4fc8f806dc01b9ebf20f0c0ab447a568701a81f010000000017a91420533320ea71c2ee4fd02d6ee4dd3dd4ea47fd028760680800")
	h := NewNetHeader(data)
	tx := &TX{}
	tx.Read(h)
	log.Println(tx.Hash, "save")
	file := fmt.Sprintf("../dat/tx%s.dat", tx.Hash)
	err := ioutil.WriteFile(file, data, os.ModePerm)
	if err != nil {
		t.Errorf("save error %v", err)
	}
}

func TestInfo(t *testing.T) {
	data2 := util.HexDecode("01000000019275cb8d4a485ce95741c013f7c0d28722160008021bb469a11982d47a662896581b0000fd6f01004830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c039596015221023fd5dd42b44769c5653cbc5947ff30ab8871f240ad0c0e7432aefe84b5b4ff3421039d52178dbde360b83f19cf348deb04fa8360e1bf5634577be8e50fafc2b0e4ef4c9552af4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c0395960175ffffffff0101000000000000000000000000")
	h2 := NewNetHeader(data2)
	tx2 := &TX{}
	tx2.Read(h2)
	log.Println(hex.EncodeToString(*tx2.Ins[0].Script))
}

func TestCloneTX(t *testing.T) {
	data2 := util.HexDecode("010000000135fb3eb02753c97977ace0ae5234a8f81045b486c826f3cd46f93bb90f003517010000006b483045022100eb2d8fba743470bacf2c567962530a6d7a3e43b0552c040039122e01cf0983fc022070ba55ec13937ab51dad7c9daa2fc8b59f7190e2debee3a6075ff1994c47f68b012102693bd134d8c1e753603e5fee11b08fc206b46d626a3267947c8923239c33d64dffffffff02e8230d00000000001976a91460823c20ec9fa15f2f7ed0955545982b67d1043288ac76eb37000000000017a914a48a80d30a56b276fb698e7c172f4d4c694f828e8700000000")
	h2 := NewNetHeader(data2)
	tx2 := &TX{}
	tx2.Read(h2)

	tx1 := tx2.Clone()

	if !tx1.Hash.Equal(tx2.Hash) {
		t.Errorf("clone tx error")
	}
}

func TestSaveTX(t *testing.T) {
	data2 := util.HexDecode("0100000001b6da357dfa24917f1f32414a10e2fcdad971a52521ecf84901f63612b0a103090000000048473044021f01ea6d57bf0373f8242ff263893ed396ea3de374439dfd80d59c2c1e6ab50a022100ee013faa0138a5f014b8f308befe2995ae3cb2e9fcd0763d2c7ca7b91f74435901ffffffff0247e8846d00000000434104a39b9e4fbd213ef24bb9be69de4a118dd0644082e47c01fd9159d38637b83fbcdc115a5d6e970586a012d1cfe3e3a8b1a3d04e763bdc5a071c0e827c0bd834a5acc0ac0d0d000000001976a9146ced4fd6ab06f237d185aebb11a7b4d92d7f8c8088ac00000000")
	h := NewNetHeader(data2)
	tx := &TX{}
	tx.Read(h)
	log.Println(tx.Hash, "save")
	err := db.UseSession(context.Background(), func(db db.DbImp) error {
		err := tx.Save(db)
		if err != nil {
			return err
		}
		return nil
	})
	if err != nil {
		t.Errorf("test save tx error %v", err)
	}
}

func TestPSHScript(t *testing.T) {
	d := util.HexDecode("00483045022100c121721a09160127ee2f6073e83c84d709ae8ebe6810f3893cb158f0635c8a0a02204fb2cb9d5ee693cf3df44660d3de63152396641fbb48c15be891c4289e06c0c201473044022037a2b5d78ecde26a72b2bc95056d82c2ea56ae55d692768c42e80f5f9d56bde7022079dc481aa4ba7e11644e9579eadd46e63f1af04a8e19be214dc7bfcafcb09a3301473044022008906911805539eabe566ea9b0b2de6aefb1993ef9bf671d4dd3e2357a15c5a5022025ce9c2409dfd198a6ef8b7015be3c6eae1b2b5726acfa737d8aef0fbe9420d5014d0b01534104220936c3245597b1513a9a7fe96d96facf1a840ee21432a1b73c2cf42c1810284dd730f21ded9d818b84402863a2b5cd1afe3a3d13719d524482592fb23c88a3410472225d3abc8665cf01f703a270ee65be5421c6a495ce34830061eb0690ec27dfd1194e27b6b0b659418d9f91baec18923078aac18dc19699aae82583561fefe54104a24db5c0e8ed34da1fd3b6f9f797244981b928a8750c8f11f9252041daad7b2d95309074fed791af77dc85abdd8bb2774ed8d53379d28cd49f251b9c08cab7fc4104dd26300a280a4c64bb42608d8cebe0d76705eda9f598a7a9945845f080f34788e6711ed7d786d3cc714aee44201d69a770f1caaf1558b8076398cbb0fc48241a54ae")
	s := script.NewScript(d)
	log.Println(s.HasMultiSig())
}

func TestCoinBaseTX(t *testing.T) {
	data, err := hex.DecodeString("010000000001010000000000000000000000000000000000000000000000000000000000000000ffffffff60036872081d2f5669614254432f4d696e65642062792031383539313737393733372f2cfabe6d6d980e95c6480064939d0a9f0bc8fa2318fc30fb5373cf2e1418f4830d7c69ab850200000000000000107a6e3608bad2c4e31e92165d8a5b0200ffffffff02a9845f4b000000001976a914536ffa992491508dca0354e52f32a3a7a679a53a88ac0000000000000000266a24aa21a9ed8719f26a8751c9ce44f62ae9903804f82f4c80f73d63dbcbe4772092037729960120000000000000000000000000000000000000000000000000000000000000000000000000")
	if err != nil {
		panic(err)
	}
	h := NewNetHeader(data)
	tx := &TX{}
	tx.Read(h)
	if !tx.IsCoinBase() {
		t.Errorf("coinbase tx check error")
	}
	if tx.Hash.String() != "c09b7a4be56da07d0e27fdaa465d9fc60f420e9216dbac70b714125729ca63fb" {
		t.Errorf("coinbase tx hashid error %v", tx.Hash)
	}
	oh := NewNetHeader()
	tx.Write(oh)
	if err := tx.Check(); err != nil {
		t.Errorf("check tx error %v", err)
	}
}

func TestTXID(t *testing.T) {
	id := "246ab84ed7e0187e395c796c0d05fe083b7379b6c6ab29edc19626a039004bcf"
	data, err := hex.DecodeString("02000000027cb7fef1b9192c534cc539f2a1e949779d49438d0c860132cfb19d61cc655bc2010000006a473044022025bb9bd14ac3bf2b627b7d2f762f6322e8bc503779a25f2d0200b0d16f91f920022052847e5abb8ffd57738de52b41430de0b06d3363ff19ade8fcb8adadc7ef316a0121020eb301f186eca040fe127fff26ae692894c07586fd94bd26db5f77ae08ce4818feffffff43957c51908895ea828b8077661f2c74e347c84424e5761a1a5da4c7e10a1348010000006a47304402200468722bd21014cb8bf67bd975e1bd1ac7efa2158b5feeb15f12ff945f40486302202c54469049b4f22e6fe30790f2336ebe783a3a4eaef05b168fb38341a6f4ce870121020eb301f186eca040fe127fff26ae692894c07586fd94bd26db5f77ae08ce4818feffffff02800808000000000017a9148f0ac79dfd0e097aef933f7b54b65d5eee72dc4087b0f91e000000000017a91435e9c35af6c5958e6f5c80575afb94b2cedec0fa877d1c0900")
	if err != nil {
		panic(err)
	}
	h := NewNetHeader(data)
	tx := &TX{}
	tx.Read(h)
	if tx.Hash.String() != id {
		t.Errorf("make tx hashid error")
	}

}

func TestTXWNoWitness(t *testing.T) {
	data, err := hex.DecodeString("0100000001ec8abe57241834aab404a43288ce8c57061dfc47fe68312e43e2baddb01dfcfe010000006b483045022100b0b297b340fc5f42640b1dd9c96d58a4c19616045b7c921e0a0177eabec1f06402201f5efe9c400b1b5005f82ba57dd653abfcda4974bbabe00dc88e1e5b7c30c74b01210346aa8f3d640d829c7d6d40243d5e052a316ed5186bebed8da300e3a2e676ce3ffdffffff011ca0bf06000000001976a914975aa8ed4bd63ed0f388f40b4a3533425e42909f88ac00000000")
	if err != nil {
		panic(err)
	}
	h := NewNetHeader(data)
	tx := &TX{}
	tx.Read(h)
	if !h.IsEOF() {
		t.Errorf("read bytes remain")
	}
	if len(tx.Ins) != 1 {
		t.Errorf("txin error")
	}
	if len(tx.Outs) != 1 {
		t.Errorf("txout error")
	}
	if tx.LockTime != 0x0 {
		t.Errorf("lock time error")
	}
	oh := NewNetHeader()
	tx.Write(oh)
	if !bytes.Equal(data, oh.Payload) {
		t.Errorf("write tx error")
	}
	if err := tx.Check(); err != nil {
		t.Errorf("check tx error %v", err)
	}
}

func TestTXWithWitness(t *testing.T) {
	data, err := hex.DecodeString("02000000027cb7fef1b9192c534cc539f2a1e949779d49438d0c860132cfb19d61cc655bc2010000006a473044022025bb9bd14ac3bf2b627b7d2f762f6322e8bc503779a25f2d0200b0d16f91f920022052847e5abb8ffd57738de52b41430de0b06d3363ff19ade8fcb8adadc7ef316a0121020eb301f186eca040fe127fff26ae692894c07586fd94bd26db5f77ae08ce4818feffffff43957c51908895ea828b8077661f2c74e347c84424e5761a1a5da4c7e10a1348010000006a47304402200468722bd21014cb8bf67bd975e1bd1ac7efa2158b5feeb15f12ff945f40486302202c54469049b4f22e6fe30790f2336ebe783a3a4eaef05b168fb38341a6f4ce870121020eb301f186eca040fe127fff26ae692894c07586fd94bd26db5f77ae08ce4818feffffff02800808000000000017a9148f0ac79dfd0e097aef933f7b54b65d5eee72dc4087b0f91e000000000017a91435e9c35af6c5958e6f5c80575afb94b2cedec0fa877d1c0900")
	if err != nil {
		panic(err)
	}
	h := NewNetHeader(data)
	tx := &TX{}
	tx.Read(h)
	if !h.IsEOF() {
		t.Errorf("read bytes remain")
	}
	if len(tx.Ins) != 2 {
		t.Errorf("txin error")
	}
	if len(tx.Outs) != 2 {
		t.Errorf("txout error")
	}
	if tx.LockTime != 0x91c7d {
		t.Errorf("lock time error")
	}
	oh := NewNetHeader()
	tx.Write(oh)
	if !bytes.Equal(data, oh.Payload) {
		t.Errorf("write tx error")
	}
	if err := tx.Check(); err != nil {
		t.Errorf("check tx error %v", err)
	}
}

func TestBlockData(t *testing.T) {
	blockId := NewHexBHash("0000000000000000002a2451180749294cd74058e0a0dd37cc19ad0ee66e77ff")

	data, err := ioutil.ReadFile("../dat/block.dat")
	if err != nil {
		panic(err)
	}
	h := NewNetHeader(data)
	m := NewMsgBlock()
	m.Read(h)
	if !m.Hash.Equal(blockId) {
		t.Errorf("block hashid error")
	}
	if !m.Merkle.Equal(m.MarkleId()) {
		t.Errorf("equal markle error")
	}
}
